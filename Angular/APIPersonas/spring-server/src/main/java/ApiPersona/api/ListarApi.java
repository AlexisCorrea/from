/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ApiPersona.api;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import ApiPersona.model.JsonApiBodyRequest;
import ApiPersona.model.JsonApiBodyResponseErrors;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-07-27T15:31:23.413Z")

@Api(value = "listar", description = "the listar API")
public interface ListarApi {

    @ApiOperation(value = "buscar una personas por el tipo de rol", nickname = "listarEstadoEstadoGet", notes = "", response = JsonApiBodyRequest.class, tags={ "personas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "persona encontrada", response = JsonApiBodyRequest.class),
        @ApiResponse(code = 404, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/listar/estado/{estado}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> listarEstadoEstadoGet(@ApiParam(value = "se recibe el rol del usuario",required=true) @PathVariable("estado") String estado);


    @ApiOperation(value = "buscar personas", nickname = "listarGet", notes = "devuelve todos los usuarios que esten almacenados", response = JsonApiBodyRequest.class, tags={ "personas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "personas encontradas", response = JsonApiBodyRequest.class),
        @ApiResponse(code = 404, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/listar",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> listarGet();


    @ApiOperation(value = "buscar una perosna", nickname = "listarIdGet", notes = "", response = JsonApiBodyRequest.class, tags={ "personas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "persona encontrada", response = JsonApiBodyRequest.class),
        @ApiResponse(code = 404, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/listar/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> listarIdGet(@ApiParam(value = "ID of pet that needs to be fetched",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "buscar una personas por el tipo de rol", nickname = "listarRolRolGet", notes = "", response = JsonApiBodyRequest.class, tags={ "personas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "persona encontrada", response = JsonApiBodyRequest.class),
        @ApiResponse(code = 404, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/listar/rol/{rol}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> listarRolRolGet(@ApiParam(value = "se recibe el rol del usuario",required=true) @PathVariable("rol") String rol);
    
    @ApiOperation(value = "buscar una personas por el tipo de rol", nickname = "listarCorreoGet", notes = "", response = JsonApiBodyRequest.class, tags={ "personas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "persona encontrada", response = JsonApiBodyRequest.class),
        @ApiResponse(code = 404, message = "datos imcompletos o incorrectos", response = JsonApiBodyResponseErrors.class) })
    @RequestMapping(value = "/listar/correo/{correo}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> listarCorreoGet(@ApiParam(value = "se recibe el rol del usuario",required=true) @PathVariable("correo") String correo);

}
